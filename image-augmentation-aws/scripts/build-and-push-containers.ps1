Write-Host "üê≥ Building and pushing Docker images to ECR..." -ForegroundColor Cyan

# Configuration
$AWS_REGION = "us-east-1"
$PROJECT_NAME = "image-augmentation"
$AWS_ACCOUNT_ID = (aws sts get-caller-identity --query Account --output text)

if (-not $AWS_ACCOUNT_ID) {
    Write-Host "‚ùå Failed to get AWS Account ID. Please check your AWS credentials." -ForegroundColor Red
    exit 1
}

Write-Host "üîç AWS Account ID: $AWS_ACCOUNT_ID" -ForegroundColor Green
Write-Host "üåç Region: $AWS_REGION" -ForegroundColor Green

# Function to create ECR repository if it doesn't exist
function Ensure-ECRRepository {
    param([string]$RepoName)
    
    $repoUri = "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$RepoName"
    
    # Check if repository exists
    $repoExists = aws ecr describe-repositories --repository-names $RepoName --region $AWS_REGION 2>$null
    
    if (-not $repoExists) {
        Write-Host "üì¶ Creating ECR repository: $RepoName" -ForegroundColor Yellow
        aws ecr create-repository --repository-name $RepoName --region $AWS_REGION --image-scanning-configuration scanOnPush=true
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Failed to create ECR repository: $RepoName" -ForegroundColor Red
            throw "ECR repository creation failed"
        }
    } else {
        Write-Host "‚úÖ ECR repository exists: $RepoName" -ForegroundColor Green
    }
    
    return $repoUri
}

# Function to build and push Docker image
function Build-And-Push-Image {
    param(
        [string]$FunctionDir,
        [string]$ImageName,
        [string]$RepoUri
    )
    
    Write-Host "üèóÔ∏è Building $ImageName..." -ForegroundColor Yellow
    
    Push-Location $FunctionDir
    
    try {
        # Build Docker image
        docker build -t $ImageName .
        if ($LASTEXITCODE -ne 0) {
            throw "Docker build failed for $ImageName"
        }
        
        # Tag image for ECR
        docker tag "${ImageName}:latest" "${RepoUri}:latest"
        if ($LASTEXITCODE -ne 0) {
            throw "Docker tag failed for $ImageName"
        }
        
        # Push to ECR
        Write-Host "üì§ Pushing $ImageName to ECR..." -ForegroundColor Yellow
        docker push "${RepoUri}:latest"
        if ($LASTEXITCODE -ne 0) {
            throw "Docker push failed for $ImageName"
        }
        
        Write-Host "‚úÖ Successfully pushed $ImageName" -ForegroundColor Green
        return "${RepoUri}:latest"
        
    } catch {
        Write-Host "‚ùå Error with $ImageName : $_" -ForegroundColor Red
        throw
    } finally {
        Pop-Location
    }
}

try {
    # Login to ECR
    Write-Host "üîê Logging into ECR..." -ForegroundColor Yellow
    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
    if ($LASTEXITCODE -ne 0) {
        throw "ECR login failed"
    }
    
    # Create repositories and get URIs
    $imageProcessorRepo = Ensure-ECRRepository "$PROJECT_NAME-image-processor"
    $rotationWorkerRepo = Ensure-ECRRepository "$PROJECT_NAME-rotation-worker"
    
    # Build and push images
    $imageProcessorUri = Build-And-Push-Image "../lambda-function/image-processor" "$PROJECT_NAME-image-processor" $imageProcessorRepo
    $rotationWorkerUri = Build-And-Push-Image "../lambda-function/rotation-worker" "$PROJECT_NAME-rotation-worker" $rotationWorkerRepo
    
    Write-Host ""
    Write-Host "üéâ All images built and pushed successfully!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã Image URIs:" -ForegroundColor Cyan
    Write-Host "   Image Processor: $imageProcessorUri" -ForegroundColor White
    Write-Host "   Rotation Worker: $rotationWorkerUri" -ForegroundColor White
    Write-Host ""
    Write-Host "üîÑ Next steps:" -ForegroundColor Cyan
    Write-Host "1. Update Terraform configuration to use container images" -ForegroundColor White
    Write-Host "2. Run 'terraform plan' to see the changes" -ForegroundColor White
    Write-Host "3. Run 'terraform apply' to deploy with containers" -ForegroundColor White
    
    # Save URIs to file for Terraform
    $uriFile = "../terraform/container-uris.txt"
    @"
# Container Image URIs - Generated by build-and-push-containers.ps1
IMAGE_PROCESSOR_URI=$imageProcessorUri
ROTATION_WORKER_URI=$rotationWorkerUri
"@ | Set-Content $uriFile
    
    Write-Host ""
    Write-Host "üíæ Container URIs saved to: terraform/container-uris.txt" -ForegroundColor Green
    
} catch {
    Write-Host "üí• Failed to build and push containers: $_" -ForegroundColor Red
    exit 1
}
